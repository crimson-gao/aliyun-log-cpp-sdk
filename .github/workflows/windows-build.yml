name: Windows
run-name: ${{ github.actor }} is building by GitHub Actions ðŸš€
on: [workflow_dispatch, push]

jobs:
  job:
    env:
      VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
      VCPKG_DIR: ${{github.workspace}}/vcpkg
      VCPKG_COMMIT: 0fa8459cf3a7caca7adc58f992bc32ff13630684
      # Configuration type to build.
      # You can convert this to a build matrix if you need coverage of multiple configuration types.
      # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
      BUILD_TYPE: Release
      # Generator: Ninja
    

    name: ${{ matrix.os }}-${{ github.workflow }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        # os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: windows-latest
            triplet: x64-windows
          # - os: ubuntu-latest
          #   triplet: x64-linux
          # - os: macos-latest
          #   triplet: x64-osx


    steps:
      - uses: actions/checkout@v3
      - uses: lukka/get-cmake@latest
      # - uses: seanmiddleditch/gha-setup-ninja@master

      - name: vcpkg build
        uses: johnwason/vcpkg-action@v5
        id: vcpkg
        with:
          pkgs: protobuf lz4 curl
          triplet: ${{matrix.triplet}}
          cache-key: ${{ matrix.os }}
          revision: master
          token: ${{ github.token }}

      - name: List $RUNNER_WORKSPACE before build
        run: find . | grep -v '\.git' | grep -v vcpkg | grep -v include
        shell: bash
        working-directory: ${{github.workspace}}/

      - name: cmake configure
        run: |
          echo ${{ steps.vcpkg.outputs.vcpkg-cmake-config }}
          cmake ${{ steps.vcpkg.outputs.vcpkg-cmake-config }} `
                -B build `
                -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} `
                -DBUILD_SAMPLE=ON -DBUILD_TESTS=ON `
                -DVERBOSE=ON -DBUILD_SHARE_LIBS=ON `
                -DPUBLISH=ON 

      - name: build
        run: |
          cmake --build build --config ${{env.BUILD_TYPE}}

      - name: install
        run: |
          cmake --install build --prefix ${{github.workspace}}/aliyun-log-cpp-sdk/build

      - name: copy files
        run: cp -rf *.h *.cpp *.proto CMakeLists.txt Findlz4.cmake Makefile *.md aliyun-log-cpp-sdk/
        shell: bash

      - name: List release dir
        run: find .
        shell: bash
        working-directory: ${{github.workspace}}/aliyun-log-cpp-sdk

      - run: mkdir -p release 
        name: mkdir
        shell: pwsh

      # - name: Set env
      #   run: echo "GITHUB_SHA_SHAORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV

      - name: Set env
        run: echo "TARGET_FILE=release/windows-x64-latest.tar.gz" >> $env:GITHUB_ENV
        shell: pwsh
      
      - name: Compress action step
        uses: a7ul/tar-action@v1.1.0
        id: compress
        with:
          command: c
          cwd: ./
          files: |
            ./aliyun-log-cpp-sdk
          outPath: ${{env.TARGET_FILE}}


      - name: save as aritifact
        uses: actions/upload-artifact@v2
        with:
          name: windows-x64-latest-artifact
          path: ${{env.TARGET_FILE}}
          retention-days: 7
